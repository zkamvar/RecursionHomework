microbenchmark(hosts(20),
parasites(20),
{HOST_TABLE <<- hash(); PARASITE_TABLE() <<- hash(); hosts_mem(20)},
{HOST_TABLE <<- hash(); PARASITE_TABLE() <<- hash(); parasites_mem(20)},
times = 1L)
source('~/Documents/Recursion_dynamics/Exercise_three.R')
#' Exercise 3: third time's to harm
#'
#' This set of exercises will build off of exercise two, which was built off of
#' exercise one. The purpose of this will be to utilize memoization and dynamic
#' programming as alternative ways of solving the Nicholson-Bailey Model
#'
#' ## Necessary packages
library(hash)
library(stringr)
library(microbenchmark)
library(reshape2)
library(ggplot2)
#'
#' ## The Nicholson-Bailey Model
#'
#' ### Formulaic definition
#' $$
#' H_{t} = \gamma \cdot H_{t-1} \cdot e^{-a \cdot P_{t-1}}\\
#' P_{t} = H_{t-1} \cdot \left(1 - e^{-a \cdot P_{t-1}}\right)
#' $$
#'
#' ### Implementation in Exercise two
#'
#' Instead of doing 10 hosts and 2 parasites, I'm drawing randomly from a
#' Poisson distribution with $\lambda = 2$ and $\lambda = 10$ for parasites and
#' hosts, respectively.
hosts <- function(t, gamma = 2, a = 0.1, seed = 9999){
if (t == 1){
set.seed(seed)
Ht1 <- rpois(1, 10)
return(Ht1)
} else {
Htm1 <- hosts(t - 1, gamma, a, seed)
Ptm1 <- parasites(t - 1, gamma, a, seed)
Ht   <- gamma * Htm1 * exp(-a * Ptm1)
return(Ht)
}
parasites <- function(t, gamma = 2, a = 0.1, seed = 9999){
if (t == 1){
set.seed(seed)
Pt1 <- rpois(1, 2)
return(Pt1)
} else {
Htm1 <- hosts(t - 1, gamma, a, seed)
Ptm1 <- parasites(t - 1, gamma, a, seed)
return(Htm1 * (1 - exp(-a * Ptm1)))
}
#'
#' ## Implemenentation one: memoization
#'
#' The point of memoization is to utilize global hashes tables in order to avoid
#' redundancy in compuation. These hash tables are utilized within the recursive
#' function calls to determine if the value has already been computed. Here, we
#' are setting up the tables.
#'
HOST_HASH <<- hash()
PARASITE_HASH <<- hash()
#'
#' I am going to add a couple of extra parameters into the functions, I will add
#' the variables `np` and `nh`, standing for "number of parasites" and "number
#' of hosts", repsectively. These will allow me to explicitly set the parameters
#' for the starting number of hosts and parasites OR the $\lambda$ value if the
#' seed is set.
make_the_call <- function(t, gamma, a){
return(str_c(as.character(t), ":", as.character(gamma), ":", as.character(a)))
}
hosts_mem <- function(t, gamma = 2, a = 0.1, seed = 9999, nh = 10, np = 2){
thiscall <- make_the_call(t, gamma, a)
if (has.key(thicall, HOST_HASH)){
return(HOST_HASH[[thiscall]])
}
if (t == 1){
if (is.null(seed)){
Ht1 <- nh
} else {
set.seed(seed)
Ht1 <- rpois(1, nh)
}
HOST_HASH[[thiscall]] <<- Ht1
return(Ht1)
} else {
Htm1 <- hosts_mem(t - 1, gamma, a, seed, nh, np)
Ptm1 <- parasites_mem(t - 1, gamma, a, seed, nh, np)
Ht   <- gamma * Htm1 * exp(-a * Ptm1)
HOST_HASH[[thiscall]] <<- Ht
return(Ht)
}
parasites_mem <- function(t, gamma = 2, a = 0.1, seed = 9999, nh = 10, np = 2){
thiscall <- make_the_call(t, gamma, a)
if (has.key(thiscall, PARASITE_HASH)){
return(PARASITE_HASH[[thiscall]])
}
if (t == 1){
if (is.null(seed)){
Pt1 <- np
} else {
set.seed(seed)
Pt1 <- rpois(1, np)
}
PARASITE_HASH[[thiscall]] <<- Pt1
return(Pt1)
} else {
Htm1 <- hosts_mem(t - 1, gamma, a, seed, nh, np)
Ptm1 <- parasites_mem(t - 1, gamma, a, seed, nh, np)
Pt   <- Htm1 * (1 - exp(-a * Ptm1))
PARASITE_HASH[[thiscall]] <<- Pt
return(Pt)
}
hosts_mem(2)
source('~/Documents/Recursion_dynamics/Exercise_three.R')
x <- .Last.value
x
source('~/Documents/Recursion_dynamics/Exercise_three.R')
benchmarks
PARASITE_HASH
host_mem(20)
hosts_mem(20)
system.time(hosts_mem(20))
system.time(bench_host(20))
source('~/Documents/Recursion_dynamics/Exercise_three.R')
HOST_HASH
sort(HOST_HASH)
as.vector(HOST_HASH)
HOST_HASH <<- hash()
PARASITE_HASH <<- hash()
hosts_dyn <- function(t, gamma = 2, a = 0.1, seed = 9999, nh = 10, np = 2){
host_vector <- seq(1, t)
if (is.null(seed)){
host_vector[1] <- nh
} else {
host_vector[1] <- rpois(1, nh)
}
HOST_HASH[[make_the_call(t, gamma, a)]] <<- host_vector[1]
for (i in seq(2, t)){
thismoment <- make_the_call(i, gamma, a)
if (has.key(thismoment, PARASITE_HASH)){
Ptm1 <- PARASITE_HASH[[thismoment]]
} else {
Ptm1 <- parasites_dyn(i - 1, gamma, a, seed, nh, np)
}
host_vector[i] <- gamma * host_vector[i - 1] * exp(-a * Ptm1)
}
return(host_vector)
}
parasites_dyn <- function(t, gamma = 2, a = 0.1, seed = 9999, nh = 10, np = 2){
parasite_vector <- seq(1, t)
if (is.null(seed)){
parasite_vector[1] <- nh
} else {
parasite_vector[1] <- rpois(1, nh)
}
PARASITE_HASH[[make_the_call(t, gamma, a)]] <<- parasite_vector[1]
for (i in seq(2, t)){
thismoment <- make_the_call(i, gamma, a)
if (has.key(thismoment, HOST_HASH)){
Htm1 <- HOST_HASH[[thismoment]]
} else {
Htm1 <- hosts_dyn(i - 1, gamma, a, seed, nh, np)
}
parasite_vector[i] <- Htm1 * (1 - exp(-a * parasite_vector[i - 1]))
}
return(parasite_vector)
}
host_dyn(20)
hosts_dyn(20)
HOST_HASH <<- hash()
PARASITE_HASH <<- hash()
hosts_dyn <- function(t, gamma = 2, a = 0.1, seed = 9999, nh = 10, np = 2){
host_vector <- seq(1, t)
if (is.null(seed)){
host_vector[1] <- nh
} else {
host_vector[1] <- rpois(1, nh)
}
HOST_HASH[[make_the_call(t, gamma, a)]] <<- host_vector[1]
for (i in seq(2, t)){
thismoment <- make_the_call(i, gamma, a)
if (has.key(thismoment, PARASITE_HASH)){
Ptm1 <- PARASITE_HASH[[thismoment]]
} else {
Ptm1 <- parasites_dyn(i - 1, gamma, a, seed, nh, np)
PARASITE_HASH[[thismoment]] <<- Ptm1
}
host_vector[i] <- gamma * host_vector[i - 1] * exp(-a * Ptm1)
}
return(host_vector)
}
parasites_dyn <- function(t, gamma = 2, a = 0.1, seed = 9999, nh = 10, np = 2){
parasite_vector <- seq(1, t)
if (is.null(seed)){
parasite_vector[1] <- nh
} else {
parasite_vector[1] <- rpois(1, nh)
}
PARASITE_HASH[[make_the_call(t, gamma, a)]] <<- parasite_vector[1]
for (i in seq(2, t)){
thismoment <- make_the_call(i, gamma, a)
if (has.key(thismoment, HOST_HASH)){
Htm1 <- HOST_HASH[[thismoment]]
} else {
Htm1 <- hosts_dyn(i - 1, gamma, a, seed, nh, np)
HOST_HASH[[thismoment]] <<- Htm1
}
parasite_vector[i] <- Htm1 * (1 - exp(-a * parasite_vector[i - 1]))
}
return(parasite_vector)
}
hosts_dyn(20)
host_parasite <- function(t, gamma = 2, a = 0.1, seed = 9999, nh = 10, np = 2){
hp_matrix <- matrix(nrow = 2, ncol = t,
dimnames = list(entity = c("host", "parasite"),
time   = seq(1, t)
)
if (is.null(seed)){
hp_matrix["host", 1]     <- nh
hp_matrix["parasite", 1] <- np
} else {
set.seed(seed)
hp_matrix["host", 1]     <- rpois(1, nh)
set.seed(seed)
hp_matrix["parasite", 1] <- rpois(1, np)
}
for (i in seq(2, t)){
Pt <- hp_matrix["host", i - 1] * (1 - exp(-a * hp_matrix["parasite", i - 1]))
Ht <- gamma * hp_matrix["host", i - 1] * exp(-a * hp_matrix["parasite", i - 1])
hp_matrix["parasite", i] <- Pt
hp_matrix["host", i]     <- Ht
}
return(hp_matrix)
}
host_parasite(10)
host_parasite(20)
bench_host(20)
?array
host_parasite <- function(t, gamma = 2, a = 0.1, seed = 9999, nh = 10, np = 2){
hp_matrix <- matrix(nrow = 2, ncol = t,
dimnames = list(entity = c("host", "parasite"),
time   = seq(1, t)
)
if (is.null(seed)){
hp_matrix["host", 1]     <- nh
hp_matrix["parasite", 1] <- np
} else {
set.seed(seed)
hp_matrix["host", 1]     <- rpois(1, nh)
set.seed(seed)
hp_matrix["parasite", 1] <- rpois(1, np)
}
for (i in seq(2, t)){
Pt <- hp_matrix["host", i - 1] * (1 - exp(-a * hp_matrix["parasite", i - 1]))
Ht <- gamma * hp_matrix["host", i - 1] * exp(-a * hp_matrix["parasite", i - 1])
hp_matrix["parasite", i] <- Pt
hp_matrix["host", i]     <- Ht
}
return(hp_matrix)
}
set.seed(9999)
seeds <- sample(10, 100000)
hp_array <- array(dim = c(2, 20, 10), dimnames = list(entity = c("host", "parasite"),
time   = seq(1, t),
seed   = NULL)
)
for (i in 1:10){
hp_array[, , i] <- host_parasite(20, seed = seeds[i])
}
sample(10, 1)
host_parasite <- function(t, gamma = 2, a = 0.1, seed = 9999, nh = 10, np = 2){
hp_matrix <- matrix(nrow = 2, ncol = t,
dimnames = list(entity = c("host", "parasite"),
time   = seq(1, t)
)
if (is.null(seed)){
hp_matrix["host", 1]     <- nh
hp_matrix["parasite", 1] <- np
} else {
set.seed(seed)
hp_matrix["host", 1]     <- rpois(1, nh)
set.seed(seed)
hp_matrix["parasite", 1] <- rpois(1, np)
}
for (i in seq(2, t)){
Pt <- hp_matrix["host", i - 1] * (1 - exp(-a * hp_matrix["parasite", i - 1]))
Ht <- gamma * hp_matrix["host", i - 1] * exp(-a * hp_matrix["parasite", i - 1])
hp_matrix["parasite", i] <- Pt
hp_matrix["host", i]     <- Ht
}
return(hp_matrix)
}
set.seed(9999)
seeds <- sample(1000000, 10)
hp_array <- array(dim = c(2, 20, 10), dimnames = list(entity = c("host", "parasite"),
time   = seq(1, t),
seed   = NULL)
)
for (i in 1:10){
hp_array[, , i] <- host_parasite(20, seed = seeds[i])
}
set.seed(9999)
seeds <- sample(1000000, 10)
hp_array <- array(dim = c(2, 20, 10), dimnames = list(entity = c("host", "parasite"),
time   = 1:20,
seed   = NULL)
)
for (i in 1:10){
hp_array[, , i] <- host_parasite(20, seed = seeds[i])
}
hp_array
dimnames(hp_array)
dimnames(hp_array)$seed
apply(hp_array, 1:2, paste)
apply(hp_array, 1:2, function(x) paste(x[1, ], x[2, ]))
apply(hp_array, 1:2, function(x) paste(x[1], x[2]))
apply(hp_array, 1, function(x) paste(x[1], x[2]))
apply(hp_array, 1, paste)
apply(hp_array, 3, print)
apply(hp_array, 3, function(x) paste(x[1, 1], x[2, 1]))
apply(hp_array, 3, function(x) paste(x[1, 1], x[2, 1], collapse = ":"))
apply(hp_array, 3, function(x) paste0("H:P = "x[1, 1], ":" x[2, 1]))
apply(hp_array, 3, function(x) paste0("H:P = ",x[1, 1], ":" x[2, 1]))
apply(hp_array, 3, function(x) paste0("H:P = ", x[1, 1], ":", x[2, 1]))
dimnames(hp_array)$seed <- apply(hp_array, 3, function(x) paste0("H:P = ", x[1, 1], ":", x[2, 1]))
hp_array
melt(hp_array)
names(melt(hp_array))
ggplot(melt(hp_array), aes(x = time, y = value, color = entity)) + geom_line() +
facet_wrap(~seed, scales = "free_y") + theme_classic()
set.seed(9999)
seeds <- sample(10000, 10)
hp_array <- array(dim = c(2, 20, 10), dimnames = list(entity = c("host", "parasite"),
time   = 1:20,
seed   = NULL)
)
for (i in 1:10){
hp_array[, , i] <- host_parasite(20, seed = seeds[i])
}
dimnames(hp_array)$seed <- apply(hp_array, 3, function(x) paste0("H:P = ", x[1, 1], ":", x[2, 1]))
ggplot(melt(hp_array), aes(x = time, y = value, color = entity)) + geom_line() +
facet_wrap(~seed, scales = "free_y") + theme_classic()
set.seed(9999)
seeds <- sample(10000, 20)
hp_array <- array(dim = c(2, 20, 10), dimnames = list(entity = c("host", "parasite"),
time   = 1:20,
seed   = NULL)
)
for (i in 1:10){
hp_array[, , i] <- host_parasite(20, seed = seeds[i])
}
dimnames(hp_array)$seed <- apply(hp_array, 3, function(x) paste0("H:P = ", x[1, 1], ":", x[2, 1]))
ggplot(melt(hp_array), aes(x = time, y = value, color = entity)) + geom_line() +
facet_wrap(~seed, scales = "free_y") + theme_classic()
set.seed(9999)
seeds <- sample(10000, 20)
hp_array <- array(dim = c(2, 20, 10), dimnames = list(entity = c("host", "parasite"),
time   = 1:20,
seed   = NULL)
)
for (i in 1:length(seeds)){
hp_array[, , i] <- host_parasite(20, seed = seeds[i])
}
dimnames(hp_array)$seed <- apply(hp_array, 3, function(x) paste0("H:P = ", x[1, 1], ":", x[2, 1]))
ggplot(melt(hp_array), aes(x = time, y = value, color = entity)) + geom_line() +
facet_wrap(~seed, scales = "free_y") + theme_classic()
seeds
length(seeds)
set.seed(9999)
seeds <- sample(10000, 20)
hp_array <- array(dim = c(2, 20, length(seeds)),
dimnames = list(entity = c("host", "parasite"),
time   = 1:20,
seed   = NULL)
)
for (i in 1:length(seeds)){
hp_array[, , i] <- host_parasite(20, seed = seeds[i])
}
dimnames(hp_array)$seed <- apply(hp_array, 3, function(x) paste0("H:P = ", x[1, 1], ":", x[2, 1]))
ggplot(melt(hp_array), aes(x = time, y = value, color = entity)) + geom_line() +
facet_wrap(~seed, scales = "free_y") + theme_classic()
length(seeds)
dimnames(hp_array)
ggplot(melt(hp_array), aes(x = time, y = value, color = entity)) + geom_line() +
facet_wrap(~seed, scales = "free_y") + theme_classic()
set.seed(9999)
seeds <- sample(10000, 12)
hp_array <- array(dim = c(2, 20, length(seeds)),
dimnames = list(entity = c("host", "parasite"),
time   = 1:20,
seed   = NULL)
)
for (i in 1:length(seeds)){
hp_array[, , i] <- host_parasite(20, seed = seeds[i])
}
dimnames(hp_array)$seed <- apply(hp_array, 3, function(x) paste0("H:P = ", x[1, 1], ":", x[2, 1]))
ggplot(melt(hp_array), aes(x = time, y = value, color = entity)) + geom_line() +
facet_wrap(~seed, scales = "free_y") + theme_classic()
set.seed(9999)
seeds <- sample(10000, 9)
hp_array <- array(dim = c(2, 20, length(seeds)),
dimnames = list(entity = c("host", "parasite"),
time   = 1:20,
seed   = NULL)
)
for (i in 1:length(seeds)){
hp_array[, , i] <- host_parasite(20, seed = seeds[i])
}
dimnames(hp_array)$seed <- apply(hp_array, 3, function(x) paste0("H:P = ", x[1, 1], ":", x[2, 1]))
ggplot(melt(hp_array), aes(x = time, y = value, color = entity)) + geom_line() +
facet_wrap(~seed, scales = "free_y") + theme_classic()
seeds <- sample(10000, 20)
hp_array <- array(dim = c(2, 20, length(seeds)),
dimnames = list(entity = c("host", "parasite"),
time   = 1:20,
seed   = NULL)
)
for (i in 1:length(seeds)){
hp_array[, , i] <- host_parasite(20, seed = seeds[i])
}
dimnames(hp_array)$seed <- apply(hp_array, 3, function(x) paste0("H:P = ", x[1, 1], ":", x[2, 1]))
ggplot(melt(hp_array), aes(x = time, y = value, color = entity)) + geom_line() +
facet_wrap(~seed, scales = "free_y") + theme_classic()
set.seed(9001)
seeds <- sample(10000, 20)
hp_array <- array(dim = c(2, 20, length(seeds)),
dimnames = list(entity = c("host", "parasite"),
time   = 1:20,
seed   = NULL)
)
for (i in 1:length(seeds)){
hp_array[, , i] <- host_parasite(20, seed = seeds[i])
}
dimnames(hp_array)$seed <- apply(hp_array, 3, function(x) paste0("H:P = ", x[1, 1], ":", x[2, 1]))
ggplot(melt(hp_array), aes(x = time, y = value, color = entity)) + geom_line() +
facet_wrap(~seed, scales = "free_y") + theme_classic()
unique(dimnames(hp_array)$seed)
benchmarks2 <- microbenchmark(host_parasite(20), bench_host(20), bench_parasite(20))
benchmarks2
set.seed(9001)
seeds <- sample(10000, 9)
hp_array <- array(dim = c(2, 20, length(seeds)),
dimnames = list(entity = c("host", "parasite"),
time   = 1:20,
seed   = NULL)
)
for (i in 1:length(seeds)){
hp_array[, , i] <- host_parasite(20, seed = seeds[i])
}
dimnames(hp_array)$seed <- apply(hp_array, 3, function(x) paste0("H:P = ", x[1, 1], ":", x[2, 1]))
ggplot(melt(hp_array), aes(x = time, y = value, color = entity)) + geom_line() +
facet_wrap(~seed, scales = "free_y") + theme_classic()
set.seed(9001)
seeds <- sample(10000, 100)
hp_array <- array(dim = c(2, 20, length(seeds)),
dimnames = list(entity = c("host", "parasite"),
time   = 1:20,
seed   = NULL)
)
for (i in 1:length(seeds)){
hp_array[, , i] <- host_parasite(20, seed = seeds[i])
}
dimnames(hp_array)$seed <- apply(hp_array, 3, function(x) paste0("H:P = ", x[1, 1], ":", x[2, 1]))
ggplot(melt(hp_array), aes(x = time, y = value, color = entity)) + geom_line() +
facet_wrap(~seed, scales = "free_y") + theme_classic()
?microbenchmark
boxplot(benchmarks2)
boxplot(benchmarks)
autoplot(benchmarks)
autoplot(benchmarks2)
library(knitr)
spin("Sequence_alignment.R")
library(stringr)
?str_split
str_split("butts", "")
strsplit("butts", "")
source('~/.active-rstudio-document')
char_vec("ATCG")
dput(char_vec("ATCG"))
str_c(char_vec("ATCG"), collapse = "")
str_c(char_vec("ATCG"))
length(char_vec("ATCG"))
length(char_vec("ATCG")) > 1
length(char_vec("ATCG")) > 1 & length(c())
length(char_vec("ATCG")) > 1 & length(c()) == 0
length(char_vec("ATCG")) > 1 & length(c()) != 0
length(c())
length(c()) != 0
length(char_vec("ATCG")) > 1 & length(c("a")) != 0
d <- 1:10
d[]
d[] <- "-"
d
fixInNamespace("fix_negative_branch", "poppr")
packrat::off()
fixInNamespace("fix_negative_branch", "poppr")
source('~/Documents/Recursion_dynamics/Exercise_four.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
base_case_answer_2.1
packageVersion("poppr")
str(packageVersion("poppr"))
str(packageVersion("poppr")) < c(1,1,2,99,25)
?packageVersion
package_version("1.1.2.99.29")
str(packageVersion("poppr")) < package_version("1.1.2.99.25")
packageVersion("poppr") < package_version("1.1.2.99.25")
packageVersion("poppr") < package_version("1.1.2")
packageVersion("poppr") > package_version("1.1.2")
packrat::on()
packrat::snapshot()
