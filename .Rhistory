#' 2. Construct a factorial algorithm and create the same table.
#' 3. Construct a terminal function to calculate the
#' $n^{th}$ triangular number.
#'
#' ## Fibonacci function
CALL_COUNTER <- 0
fib <- function(n, count = TRUE){
if (count){
CALL_COUNTER <<- CALL_COUNTER + 1
}
if (n == 1 || n == 2){
return(1)
} else {
a <- fib(n - 1)
b <- fib(n - 2)
c <- a + b
return(c)
}
source('~/.active-rstudio-document')
fib(1)
CALL_COUNTER
source('~/Documents/Recursion_dynamics/Exercise_one.R')
sapply(1:10, function(x) CALL_COUNTER <- 0; fib(x))
sapply(1:10, function(x){CALL_COUNTER <- 0; fib(x)})
CALL_COUNTER
source('~/Documents/Recursion_dynamics/Exercise_one.R')
for (i in 1:10){
if (i == 1){
print("n\tfibonacci\tCALL_COUNTER")
}
CALL_COUNTER <- 0
fib_res <- fib(i)
print(paste(c(i, fib_res, CALL_COUNTER)), collapse = "\t")
}
source('~/.active-rstudio-document')
n
restab
source('~/.active-rstudio-document')
source('~/Documents/Recursion_dynamics/.Rprofile')
source('~/Documents/Recursion_dynamics/Exercise_one.R')
install.packages("knitr")
library("stringr", lib.loc="~/Documents/Recursion_dynamics/packrat/lib/x86_64-apple-darwin13.4.0/3.1.2")
detach("package:stringr", unload=TRUE)
install.packages("ggplot2")
install.packages("devtools")
install.packages(c("hash", "stringr", "TurtleGraphics"))
devtools::install_github("oneilsh/rstackdeque")
source('~/.active-rstudio-document')
restab
install.packages("reshape2")
reshape2::melt(restab)
?reshape2::melt(restab)
help("melt", package = "reshape2")
?reshape2::melt(restab, measure.vars = "n")
?reshape2::melt(restab, measure.vars = n)
restab
?reshape2::melt(restab, 2:3)
?reshape2::melt(restab)
reshape2::melt(restab)
reshape2::melt(restab, measure.vars = n)
reshape2::melt(restab, measure.vars = N)
reshape2::melt(restab, measure.vars = "n")
reshape2::melt(restab, measure.vars = 2:3)
ggplot(melt(restab, measure.vars = 2:3), aes(x = n, y = value, color = variable)) +
geom_line()
fib(20)
fib(30)
source('~/.active-rstudio-document')
fact(4)
fact(5)
fact(1) == 1
fact(2) == 2*1
fact(5) == 5*4*3*2*1
fact(15)
fact(20)
source('~/.active-rstudio-document')
restab
tfun <- function(n, call_count = TRUE){
if (call_count){
CALL_COUNTER <- CALL_COUNTER + 1
}
if (n == 1){
return(1)
} else {
tn <- n + tfun(n - 1)
return(tn)
}
tfun(4)
cumsum(1:4)
max(cumsum(1:4))
packrat::snapshot(prompt = FALSE)
source('~/Documents/Recursion_dynamics/Exercise_one.R')
n <- 20
restab <- data.frame(list(n = 1:n,
`Fibonacci number` = 1:n,
`Number of Calls` = 1:n),
check.names = FALSE)
for (i in 1:n){
CALL_COUNTER <- 0
fib_res      <- fib(i)
restab[i, ]  <- c(i, fib_res, CALL_COUNTER)
}
restab
restab[[3]] - restab[[2]]
plot(restab[[3]], restab[[2]])
lm(restab[[3]] ~ restab[[2]])
summary(lm(restab[[3]] ~ restab[[2]]))
summary(lm(restab[[2]] ~ restab[[3]]))
(restab[[3]] - restab[[2]])/2
diff(restab[[3]] - restab[[2]])
(restab[[3]] - restab[[2]])/restab[[2]]
plot((restab[[3]] - restab[[2]])/restab[[2]])
plot((restab[[3]] - restab[[2]])/restab[[1]])
plot((restab[[3]] - restab[[2]]))
(restab[[3]] - restab[[2]])
diff(restab[[3]] - restab[[2]])
restab[[2]]
plot(restab[[2]])
points(diff(restab[[3]] - restab[[2]]), col = "red")
plot(diff(restab[[3]] - restab[[2]]), col = "red")
points(restab[[2]])
restab
plot(diff(restab[[3]], restab[[2]]), col = "red")
diff(restab[[3]], restab[[2]])
diff(restab[[3]]  - restab[[2]])
diff(restab[[3]]  - restab[[2]]
)
restab[[3]]  - restab[[2]]
restab[[2]]
restab[[3]]
restab[[3]]/2 + 1
(restab[[3]] + 1)/2
restab[[2]]
restab[[2]]*2
restab[[2]]*2 - 1
restab[[3]]
177 + 287
177 + 287 + 1
177 + 287 + 1 + 753
177 + 287 + 1 + 753 + 1
cumsum(restab[[3]] + 1)
cumsum(restab[[3]])
cumsum(restab[[3]]) + 1
restab[[3]]
cumsum(restab[[3]] + 1) + 1
restab[[3]]
all(restab[[2]] <= CALL_COUNTER)
plot(restab[[3]] - restab[[2]])
plot(restab[[2]], restab[[3]])
call_diff <- restab[[3]] - restab[[2]]
diff(call_diff)
restab[[2]]
restab[[2]] - call_diff
restab[[2]] - diff(call_diff)
call_diff
restab[[2]]
plot(diff(call_diff))
points(restab[[2]])
points(restab[[2]], color = "red")
points(restab[[2]], col = "red")
plot(restab[[3]])
points(restab[[2]], col = "red")
points(diff(call_diff), col = "blue")
plot(log(restab[[2]]))
plot(log(restab[[3]]))
points(log(restab[[2]]), col = "blue")
points(x = 2:20, y = log(diff(call_diff)), col = "red")
plot(log(restab[[3]]))
points(restab[[2]], col = "red")
plot(log(restab[[3]]))
points(log(restab[[2]]), col = "blue")
points(log(diff(call_diff)), col = "red")
length(diff(call_diff))
diff(call_diff)
class(diff(call_diff))
log(diff(call_diff))
call_diff
call_diff/2
floor(call_diff/2)
ceiling(call_diff/2)
(1 + call_diff)/2
(call_diff - 1)/2
restab[[3]]/2
(restab[[3]] + 1)/2
(restab[[2]] - 1)*2
diff(call_diff)
restab[[2]]
restab[[3]]
fib(3)
fib(2)
fib(3)
fib(2)-1
fib(3)-1
fib(3)*2-1
fib(4)*2-1
fib(5)*2-1
fib(4)
fib(4)*2 - 1
fib(5)*2 - 1
fib(5)
fib(6)
restab[[2]]*2 - restab[[3]]
diff(restab[[3]])
diff(restab[[3]])/2
restab[[2]]
restab[[3]]
fib(21)
4181*2 + 1 + 6765 + 1
CALL_COUNTER <- 0
fib(21)
4181*2 + 1 + 6765*2 + 1
4181*2 - 1 + 6765*2 - 1
(4181*2) + 1 + (6765*2) + 1
(4181*2) + (6765*2) - 1
restab[[2]][19] + restab[[2]][20]
(nextcall <- nextfib*2 - 1)
(nextfib <- restab[[2]][19] + restab[[2]][20])
(nextcall <- nextfib*2 - 1)
(nextfib <- restab[[2]][19] + restab[[2]][20])
(nextcall <- nextfib*2 - 1)
CALL_COUNTER <- 0
fib(21)
CALL_COUNTER
(4181*2) + (6765*2) - 1
library(rstackdeque)
s <- rstack()
s <- insert_top(s, "A")
s
s <- insert_top(s, "B")
s <- insert_top(s, "C")
s
print(s)
print(peek_top(s))
s <- without_top(s)
print(s)
g <- insert_top(s, "X")
print(s)
print(g)
insert_top
glist <- as.list(g)
print(glist)
rows <- rstack()
rows <- insert_top(rows, list(name = "bob", age = 24))
rows <- insert_top(rows, list(name = "joe", age = 27))
rows
print(rows)
rowsdf <- as.data.frame(rows)
print(rowsdf)
#' Remember the fibonacci sequence function from Exercise_one.R
fib <- function(n, call_count = TRUE){
if (call_count){
CALL_COUNTER <<- CALL_COUNTER + 1
}
if (n == 1 || n == 2){
return(1)
} else {
a <- fib(n - 1)
b <- fib(n - 2)
c <- a + b
return(c)
}
#' Now we are going to produce a table from before with stacks.
library(rstackdeque)
info <- rstack()
for (i in seq(1, 15)){
CALL_COUNTER <- 0
row  <- list(n = i, fibn = fib(i), calls = CALL_COUNTER)
info <- insert_top(info, row)
}
info
as.data.frame(info)
library(ggplot2)
infodf <- as.data.frame(info)
p <- ggplot(infodf) + geom_line(aes(x = n, y = fibn)) +
geom_line(aes(x = n, y = calls))
plot(p)
infodf <- as.data.frame(infodf)
p <- ggplot(infodf) + geom_line(aes(x = n, y = fibn)) +
geom_line(aes(x = n, y = calls))
plot(p)
infodf
ggplot(infodf) + geom_line(aes(x = n, y = fibn)) +
geom_line(aes(x = n, y = calls))
str(infodf)
?stackdeque
?rstackdeque
#'
print(head(as.data.frame(s)))
info <- rstack()
for (i in seq(1, 15)){
CALL_COUNTER <- 0
row  <- data.frame(list(n = i, fibn = fib(i), calls = CALL_COUNTER))
info <- insert_top(info, row)
}
library(ggplot2)
infodf <- as.data.frame(infodf)
p <- ggplot(infodf) +
geom_line(aes(x = n, y = fibn)) +
geom_line(aes(x = n, y = calls))
try(plot(p))
infodf
str(infodf)
info <- rstack()
for (i in seq(1, 15)){
CALL_COUNTER <- 0
row  <- as.data.frame(list(n = i, fibn = fib(i), calls = CALL_COUNTER))
info <- insert_top(info, row)
}
library(ggplot2)
infodf <- as.data.frame(infodf)
p <- ggplot(infodf) +
geom_line(aes(x = n, y = fibn)) +
geom_line(aes(x = n, y = calls))
try(plot(p))
rowsdf
str(rowsdf)
infodf
infodf <- as.data.frame(info)
str(info)
str(infodf)
infodf <- as.data.frame(info)
p <- ggplot(infodf) +
geom_line(aes(x = n, y = fibn)) +
geom_line(aes(x = n, y = calls))
try(plot(p))
info <- rstack()
for (i in seq(1, 15)){
CALL_COUNTER <- 0
row  <- list(n = i, fibn = fib(i), calls = CALL_COUNTER)
info <- insert_top(info, row)
}
library(ggplot2)
infodf <- as.data.frame(info)
p <- ggplot(infodf) +
geom_line(aes(x = n, y = fibn)) +
geom_line(aes(x = n, y = calls))
try(plot(p))
info <- rstack()
for (i in seq(1, 15)){
CALL_COUNTER <- 0
row  <- data.frame(list(n = i, fibn = fib(i), calls = CALL_COUNTER))
info <- insert_top(info, row)
}
library(ggplot2)
infodf <- as.data.frame(info)
p <- ggplot(infodf) +
geom_line(aes(x = n, y = fibn)) +
geom_line(aes(x = n, y = calls))
try(plot(p))
fib(4)
CALL_COUNTER <- 0
fib(4)
library(stringr)
fib <- function(n, call_count = TRUE){
CALL_COUNTER <<- CALL_COUNTER + 1
thiscall <- str_c("fib:n=", as.character(n))
CALL_STACK <<- insert_top(CALL_STACK, thiscall)
if (n == 1 || n == 2){
CALL_STACK <<- without_top(CALL_STACK)
return(1)
} else {
a <- fib(n - 1)
b <- fib(n - 2)
c <- a + b
CALL_STACK <<- without_top(CALL_STACK)
return(c)
}
CALL_STACK <<- rstack()
CALL_COUNTER <<- 0
print_string_stack <- function(s){
print(s)
}
print_string_stack <- function(s){
print(s)
}
fib <- function(n, call_count = TRUE){
CALL_COUNTER <<- CALL_COUNTER + 1
thiscall <- str_c("fib:n=", as.character(n))
CALL_STACK <<- insert_top(CALL_STACK, thiscall)
print_string_stack(CALL_STACK)
if (n == 1 || n == 2){
CALL_STACK <<- without_top(CALL_STACK)
print_string_stack(CALL_STACK)
return(1)
} else {
a <- fib(n - 1)
b <- fib(n - 2)
c <- a + b
CALL_STACK <<- without_top(CALL_STACK)
print_string_stack(CALL_STACK)
return(c)
}
CALL_STACK <<- rstack()
CALL_COUNTER <<- 0
info <- rstack()
for (i in seq(1, 15)){
CALL_COUNTER <- 0
row  <- data.frame(list(n = i, fibn = fib(i), calls = CALL_COUNTER))
info <- insert_top(info, row)
}
library(ggplot2)
infodf <- as.data.frame(info)
p <- ggplot(infodf) +
geom_line(aes(x = n, y = fibn)) +
geom_line(aes(x = n, y = calls))
try(plot(p))
CALL_STACK
fib(4)
print_string_stack <- function(s){
char_vec <- as.character(as.list(s))
print(char_vec)
}
fib <- function(n, call_count = TRUE){
CALL_COUNTER <<- CALL_COUNTER + 1
thiscall <- str_c("fib:n=", as.character(n))
CALL_STACK <<- insert_top(CALL_STACK, thiscall)
print_string_stack(CALL_STACK)
if (n == 1 || n == 2){
CALL_STACK <<- without_top(CALL_STACK)
print_string_stack(CALL_STACK)
return(1)
} else {
a <- fib(n - 1)
b <- fib(n - 2)
c <- a + b
CALL_STACK <<- without_top(CALL_STACK)
print_string_stack(CALL_STACK)
return(c)
}
CALL_STACK <<- rstack()
CALL_COUNTER <<- 0
info <- rstack()
fib(4)
print_string_stack <- function(s){
char_vec <- as.character(as.list(s))
print(rev(char_vec))
}
fib <- function(n, call_count = TRUE){
CALL_COUNTER <<- CALL_COUNTER + 1
thiscall <- str_c("fib:n=", as.character(n))
CALL_STACK <<- insert_top(CALL_STACK, thiscall)
print_string_stack(CALL_STACK)
if (n == 1 || n == 2){
CALL_STACK <<- without_top(CALL_STACK)
print_string_stack(CALL_STACK)
return(1)
} else {
a <- fib(n - 1)
b <- fib(n - 2)
c <- a + b
CALL_STACK <<- without_top(CALL_STACK)
print_string_stack(CALL_STACK)
return(c)
}
CALL_STACK <<- rstack()
CALL_COUNTER <<- 0
info <- rstack()
fib(4)
print_string_stack <- function(s){
char_vec <- as.character(as.list(s))
message(rev(char_vec))
}
fib <- function(n, call_count = TRUE){
CALL_COUNTER <<- CALL_COUNTER + 1
thiscall <- str_c("fib:n=", as.character(n))
CALL_STACK <<- insert_top(CALL_STACK, thiscall)
print_string_stack(CALL_STACK)
if (n == 1 || n == 2){
CALL_STACK <<- without_top(CALL_STACK)
print_string_stack(CALL_STACK)
return(1)
} else {
a <- fib(n - 1)
b <- fib(n - 2)
c <- a + b
CALL_STACK <<- without_top(CALL_STACK)
print_string_stack(CALL_STACK)
return(c)
}
CALL_STACK <<- rstack()
CALL_COUNTER <<- 0
info <- rstack()
fib(4)
print_string_stack <- function(s){
char_vec <- as.character(as.list(s))
message(rev(paste(char_vec, collapse = " ")))
}
fib <- function(n, call_count = TRUE){
CALL_COUNTER <<- CALL_COUNTER + 1
thiscall <- str_c("fib:n=", as.character(n))
CALL_STACK <<- insert_top(CALL_STACK, thiscall)
print_string_stack(CALL_STACK)
if (n == 1 || n == 2){
CALL_STACK <<- without_top(CALL_STACK)
print_string_stack(CALL_STACK)
return(1)
} else {
a <- fib(n - 1)
b <- fib(n - 2)
c <- a + b
CALL_STACK <<- without_top(CALL_STACK)
print_string_stack(CALL_STACK)
return(c)
}
CALL_STACK <<- rstack()
CALL_COUNTER <<- 0
info <- rstack()
fib(4)
fib(5)
fib(6)
fib(7)
fib(8)
