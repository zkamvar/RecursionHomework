#' # Exercise One: Basic Recursion
#'
#' There are three tasks in this exercise:
#'
#' 1. Construct the fibonacci algorithm and make a table with N, the fibonacci
#' number, and the result of CALL_COUNTER.
#' 2. Construct a factorial algorithm and create the same table.
#' 3. Construct a terminal function to calculate the
#' $n^{th}$ triangular number.
#'
#' ## Fibonacci function
CALL_COUNTER <- 0
fib <- function(n){
if (n == 1 || n == 2){
return(1)
} else {
a <- fib(n - 1)
b <- fib(n - 2)
c <- a + b
return(c)
}
fib(8)
fib(1:10)
fib(1)
sapply(1:10, fib)
#' # Exercise One: Basic Recursion
#'
#' There are three tasks in this exercise:
#'
#' 1. Construct the fibonacci algorithm and make a table with N, the fibonacci
#' number, and the result of CALL_COUNTER.
#' 2. Construct a factorial algorithm and create the same table.
#' 3. Construct a terminal function to calculate the
#' $n^{th}$ triangular number.
#'
#' ## Fibonacci function
CALL_COUNTER <- 0
fib <- function(n, count = TRUE){
if (count){
CALL_COUNTER <<- CALL_COUNTER + 1
}
if (n == 1 || n == 2){
return(1)
} else {
a <- fib(n - 1)
b <- fib(n - 2)
c <- a + b
return(c)
}
source('~/.active-rstudio-document')
fib(1)
CALL_COUNTER
source('~/Documents/Recursion_dynamics/Exercise_one.R')
sapply(1:10, function(x) CALL_COUNTER <- 0; fib(x))
sapply(1:10, function(x){CALL_COUNTER <- 0; fib(x)})
CALL_COUNTER
source('~/Documents/Recursion_dynamics/Exercise_one.R')
for (i in 1:10){
if (i == 1){
print("n\tfibonacci\tCALL_COUNTER")
}
CALL_COUNTER <- 0
fib_res <- fib(i)
print(paste(c(i, fib_res, CALL_COUNTER)), collapse = "\t")
}
source('~/.active-rstudio-document')
n
restab
source('~/.active-rstudio-document')
source('~/Documents/Recursion_dynamics/.Rprofile')
source('~/Documents/Recursion_dynamics/Exercise_one.R')
install.packages("knitr")
library("stringr", lib.loc="~/Documents/Recursion_dynamics/packrat/lib/x86_64-apple-darwin13.4.0/3.1.2")
detach("package:stringr", unload=TRUE)
install.packages("ggplot2")
install.packages("devtools")
install.packages(c("hash", "stringr", "TurtleGraphics"))
devtools::install_github("oneilsh/rstackdeque")
source('~/.active-rstudio-document')
restab
install.packages("reshape2")
reshape2::melt(restab)
?reshape2::melt(restab)
help("melt", package = "reshape2")
?reshape2::melt(restab, measure.vars = "n")
?reshape2::melt(restab, measure.vars = n)
restab
?reshape2::melt(restab, 2:3)
?reshape2::melt(restab)
reshape2::melt(restab)
reshape2::melt(restab, measure.vars = n)
reshape2::melt(restab, measure.vars = N)
reshape2::melt(restab, measure.vars = "n")
reshape2::melt(restab, measure.vars = 2:3)
ggplot(melt(restab, measure.vars = 2:3), aes(x = n, y = value, color = variable)) +
geom_line()
fib(20)
fib(30)
source('~/.active-rstudio-document')
fact(4)
fact(5)
fact(1) == 1
fact(2) == 2*1
fact(5) == 5*4*3*2*1
fact(15)
fact(20)
source('~/.active-rstudio-document')
restab
tfun <- function(n, call_count = TRUE){
if (call_count){
CALL_COUNTER <- CALL_COUNTER + 1
}
if (n == 1){
return(1)
} else {
tn <- n + tfun(n - 1)
return(tn)
}
tfun(4)
cumsum(1:4)
max(cumsum(1:4))
